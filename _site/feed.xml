<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-21T13:28:30+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mercedes Lovo</title><subtitle>My first web site</subtitle><author><name>Mercedes Lovo</name></author><entry><title type="html">The Mandelbrot Set</title><link href="http://localhost:4000/2024/04/24/the-mandelbrot-set.html" rel="alternate" type="text/html" title="The Mandelbrot Set" /><published>2024-04-24T00:00:00+02:00</published><updated>2024-04-24T00:00:00+02:00</updated><id>http://localhost:4000/2024/04/24/the-mandelbrot-set</id><content type="html" xml:base="http://localhost:4000/2024/04/24/the-mandelbrot-set.html"><![CDATA[<p>If the Julia set is a way to graphically represent the behavior of a function when evaluated recursively given a seed or initial value, remember that it involves assigning a color in the complex number plane to each initial value depending on whether the function converges or diverges, and in the latter case, how quickly it does so.</p>

<p>Mandelbrot is a particular case; it could be said that it is a map of the Julia set of a specific function, f(z) = z^2 + c , where z  is the initial value or seed for the function that will be called recursively, and c  is a constant. Both can belong to the set of complex numbers.</p>

<p>So, a map of what? It answers the question of for which values of c the Julia set converges if our initial  z is zero.</p>

<p>That is, in Mandelbrot we will also call a function recursively and also store the resulting values in a set. The difference is that in this case, our initial value will always be zero. What we will change now is our  c  or constant. We can now move around our complex number plane and assign a color to each point depending on whether it corresponds to a  c  where the function diverges or not.</p>

<div>
<img src="/assets/images/mandelbrot.png" alt="1100px" width="1100px" />
</div>

<p>As a result, we have the two related sets: we know that if we use a  c that converges in Mandelbrot to create a Julia set, it will converge at zero.</p>

<p>Below is a dynamically created Julia set. The mouse position represents the  c of the formula, and the graph will show how the function behaves with each point as an initial value. Note that if you place the mouse where the Mandelbrot set converges, the Julia set converges at the initial value zero.</p>

<div>
<script src="https://cdn.plot.ly/plotly-2.27.0.min.js"></script>
    <div id="myDiv"></div>
    <script src="/assets/js/mandelbrot.js"></script>
</div>]]></content><author><name>Mercedes Lovo</name></author><summary type="html"><![CDATA[If the Julia set is a way to graphically represent the behavior of a function when evaluated recursively given a seed or initial value, remember that it involves assigning a color in the complex number plane to each initial value depending on whether the function converges or diverges, and in the latter case, how quickly it does so.]]></summary></entry><entry><title type="html">Julia Set</title><link href="http://localhost:4000/2024/03/20/julia-set.html" rel="alternate" type="text/html" title="Julia Set" /><published>2024-03-20T00:00:00+01:00</published><updated>2024-03-20T00:00:00+01:00</updated><id>http://localhost:4000/2024/03/20/julia-set</id><content type="html" xml:base="http://localhost:4000/2024/03/20/julia-set.html"><![CDATA[<p>What happens if I take a function and evaluate it at a value, then use the result to evaluate the same function again, and then with this new result evaluate the same function again, and so on indefinitely. Let’s say I store these results in a set. Depending on the function, it could happen that, regardless of the initial value I choose for my evaluation, my set diverges and with each new iteration it gets closer to infinity, like f(x) = x + x , or it converges and gets very close to or reaches a certain value, like f(x) = x  (which is a very boring function but a totally valid one that converges if evaluated recursively no matter the initial seed or starting value), or it could enter a cycle of periodicity like f(x) = 4/x, giving me the same results in a periodic manner.</p>

<p>I could also find functions that do depend on the initial value and show one behavior or another. For example, the function f(x) = x^2 - 2, which has chaotic behavior but has attractor points depending on the initial conditions.</p>

<p>Lastly, we also have functions for which recursion leads us to values for which the function is not defined, for example, the function f(x) = sqrt(x) , which tends to one for positives but is not defined for negatives… unless we use complex numbers.</p>

<p>But using complex numbers opens the door to a whole new world of initial values. In fact, it fills the plane if we imagine that each point of a plane corresponds to an initial value that could be on the x-axis, meaning it belongs to the set of reals, but also have a componet on the y-axis and belongs to the world of complex numbers.</p>

<p>The Julia set is this: let’s say that for each function, we can take the plane with all the initial values and assign a color depending on whether it converges or diverges, and the speed at which it does so.</p>

<p>Let’s take, for example, the following function  f(z) = z^2 + c  where  c is a constant complex number ( 0.28 - 0.01i ) and z can be any value in the complex number plane.
We would have the following figure, showing in dark red the z values where the equation converges and in dark blue where it diverges at great speed.</p>

<div>
<script src="https://cdn.plot.ly/plotly-2.27.0.min.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <div id="myDiv"></div>
    <script src="/assets/js/julia2.js"></script>
</div>

<p>What makes Julia sets fascinating is their intricate and often highly detailed fractal structure. They exhibit self-similarity at different scales, meaning that zooming into a Julia set reveals similar patterns as the overall set. This property makes them visually stunning and mathematically rich objects of study.</p>]]></content><author><name>Mercedes Lovo</name></author><summary type="html"><![CDATA[What happens if I take a function and evaluate it at a value, then use the result to evaluate the same function again, and then with this new result evaluate the same function again, and so on indefinitely. Let’s say I store these results in a set. Depending on the function, it could happen that, regardless of the initial value I choose for my evaluation, my set diverges and with each new iteration it gets closer to infinity, like f(x) = x + x , or it converges and gets very close to or reaches a certain value, like f(x) = x (which is a very boring function but a totally valid one that converges if evaluated recursively no matter the initial seed or starting value), or it could enter a cycle of periodicity like f(x) = 4/x, giving me the same results in a periodic manner.]]></summary></entry></feed>